/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Exchange {
  export type _OrderStruct = {
    id: BigNumberish;
    user: AddressLike;
    tokenGet: AddressLike;
    amountGet: BigNumberish;
    tokenGive: AddressLike;
    amountGive: BigNumberish;
    timestamp: BigNumberish;
    status: BigNumberish;
  };

  export type _OrderStructOutput = [
    id: bigint,
    user: string,
    tokenGet: string,
    amountGet: bigint,
    tokenGive: string,
    amountGive: bigint,
    timestamp: bigint,
    status: bigint
  ] & {
    id: bigint;
    user: string;
    tokenGet: string;
    amountGet: bigint;
    tokenGive: string;
    amountGive: bigint;
    timestamp: bigint;
    status: bigint;
  };
}

export interface ExchangeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "cancelOrder"
      | "depositEther"
      | "depositToken"
      | "feeAccount"
      | "feePercent"
      | "fillOrder"
      | "getOrderStatus"
      | "getOrders"
      | "makeOrder"
      | "orderCount"
      | "orders"
      | "tokens"
      | "withdrawEther"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Cancel"
      | "Deposit"
      | "Order"
      | "Trade"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEther",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOrders", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "makeOrder",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orderCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAccount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orderCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace CancelEvent {
  export type InputTuple = [
    id: BigNumberish,
    user: AddressLike,
    tokenGet: AddressLike,
    amountGet: BigNumberish,
    tokenGive: AddressLike,
    amountGive: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    user: string,
    tokenGet: string,
    amountGet: bigint,
    tokenGive: string,
    amountGive: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    id: bigint;
    user: string;
    tokenGet: string;
    amountGet: bigint;
    tokenGive: string;
    amountGive: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    token: AddressLike,
    user: AddressLike,
    amount: BigNumberish,
    balance: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    user: string,
    amount: bigint,
    balance: bigint
  ];
  export interface OutputObject {
    token: string;
    user: string;
    amount: bigint;
    balance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderEvent {
  export type InputTuple = [
    id: BigNumberish,
    user: AddressLike,
    tokenGet: AddressLike,
    amountGet: BigNumberish,
    tokenGive: AddressLike,
    amountGive: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    user: string,
    tokenGet: string,
    amountGet: bigint,
    tokenGive: string,
    amountGive: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    id: bigint;
    user: string;
    tokenGet: string;
    amountGet: bigint;
    tokenGive: string;
    amountGive: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeEvent {
  export type InputTuple = [
    id: BigNumberish,
    user: AddressLike,
    tokenGet: AddressLike,
    amountGet: BigNumberish,
    tokenGive: AddressLike,
    amountGive: BigNumberish,
    userFill: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    user: string,
    tokenGet: string,
    amountGet: bigint,
    tokenGive: string,
    amountGive: bigint,
    userFill: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    id: bigint;
    user: string;
    tokenGet: string;
    amountGet: bigint;
    tokenGive: string;
    amountGive: bigint;
    userFill: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    token: AddressLike,
    user: AddressLike,
    amount: BigNumberish,
    balance: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    user: string,
    amount: bigint,
    balance: bigint
  ];
  export interface OutputObject {
    token: string;
    user: string;
    amount: bigint;
    balance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Exchange extends BaseContract {
  connect(runner?: ContractRunner | null): Exchange;
  waitForDeployment(): Promise<this>;

  interface: ExchangeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<
    [_token: AddressLike, _user: AddressLike],
    [bigint],
    "view"
  >;

  cancelOrder: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  depositEther: TypedContractMethod<[], [void], "payable">;

  depositToken: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  feeAccount: TypedContractMethod<[], [string], "view">;

  feePercent: TypedContractMethod<[], [bigint], "view">;

  fillOrder: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  getOrderStatus: TypedContractMethod<[_id: BigNumberish], [bigint], "view">;

  getOrders: TypedContractMethod<[], [Exchange._OrderStructOutput[]], "view">;

  makeOrder: TypedContractMethod<
    [
      _tokenGet: AddressLike,
      _amountGet: BigNumberish,
      _tokenGive: AddressLike,
      _amountGive: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  orderCount: TypedContractMethod<[], [bigint], "view">;

  orders: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string, bigint, bigint, bigint] & {
        id: bigint;
        user: string;
        tokenGet: string;
        amountGet: bigint;
        tokenGive: string;
        amountGive: bigint;
        timestamp: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  tokens: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  withdrawEther: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [_token: AddressLike, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelOrder"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositEther"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "depositToken"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeAccount"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fillOrder"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOrderStatus"
  ): TypedContractMethod<[_id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOrders"
  ): TypedContractMethod<[], [Exchange._OrderStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "makeOrder"
  ): TypedContractMethod<
    [
      _tokenGet: AddressLike,
      _amountGet: BigNumberish,
      _tokenGive: AddressLike,
      _amountGive: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "orderCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "orders"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, string, bigint, bigint, bigint] & {
        id: bigint;
        user: string;
        tokenGet: string;
        amountGet: bigint;
        tokenGive: string;
        amountGive: bigint;
        timestamp: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokens"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawEther"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Cancel"
  ): TypedContractEvent<
    CancelEvent.InputTuple,
    CancelEvent.OutputTuple,
    CancelEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Order"
  ): TypedContractEvent<
    OrderEvent.InputTuple,
    OrderEvent.OutputTuple,
    OrderEvent.OutputObject
  >;
  getEvent(
    key: "Trade"
  ): TypedContractEvent<
    TradeEvent.InputTuple,
    TradeEvent.OutputTuple,
    TradeEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Cancel(uint256,address,address,uint256,address,uint256,uint256)": TypedContractEvent<
      CancelEvent.InputTuple,
      CancelEvent.OutputTuple,
      CancelEvent.OutputObject
    >;
    Cancel: TypedContractEvent<
      CancelEvent.InputTuple,
      CancelEvent.OutputTuple,
      CancelEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Order(uint256,address,address,uint256,address,uint256,uint256)": TypedContractEvent<
      OrderEvent.InputTuple,
      OrderEvent.OutputTuple,
      OrderEvent.OutputObject
    >;
    Order: TypedContractEvent<
      OrderEvent.InputTuple,
      OrderEvent.OutputTuple,
      OrderEvent.OutputObject
    >;

    "Trade(uint256,address,address,uint256,address,uint256,address,uint256)": TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
    Trade: TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;

    "Withdraw(address,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
